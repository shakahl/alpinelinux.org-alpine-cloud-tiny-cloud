# Tiny Cloud - Init Functions
# vim:set ts=4 et ft=sh:

# set defaults
: "${LIBDIR:=$PREFIX/lib}"
. "$LIBDIR/tiny-cloud/common"

: "${SKIP_INIT_ACTIONS:=}"
: "${HOTPLUG_TYPE:=mdev}"

### default phase actions (without leading 'init__')

INIT_ACTIONS_EARLY="
    expand_root
    install_hotplugs
"
INIT_ACTIONS_MAIN="
    save_userdata
    set_hostname
    set_ssh_keys
"
INIT_ACTIONS_FINAL="
    run_userdata
"

# try to ensure existence of output directories, but otherwise don't panic
[ ! -d "$TINY_CLOUD_LOGS" ] && mkdir -p "$TINY_CLOUD_LOGS" || true
[ ! -d "$TINY_CLOUD_VAR" ] && mkdir -p "$TINY_CLOUD_VAR" || true

### init-early functions...

init__expand_root() {
    local dev=$(awk '$2 == "/" {print $1}' "$ROOT"/proc/mounts)
    local partition=$(cat "$ROOT/sys/class/block/${dev#/dev/}/partition" 2>/dev/null)

    if [ -n "$partition" ]; then
        # it's a partition, resize it
        local volume=$(readlink -f "$ROOT/sys/class/block/${dev#/dev/}/..")
        volume="/dev/${volume##*/}"
        echo ", +" | $MOCK sfdisk -q --no-reread -N "$partition" "$volume"
        $MOCK partx -u "$volume"
    fi
    # resize filesystem
    $MOCK resize2fs "$dev"
}

init__install_hotplugs() {
    local level result rc=0

    [ ! -n "$HOTPLUG_MODULES" ] && return
    if [ -f "$LIBDIR/tiny-cloud/$HOTPLUG_TYPE" ]; then
        . "$LIBDIR/tiny-cloud/$HOTPLUG_TYPE"
    fi

    printf ' :' >&2
    for module in $HOTPLUG_MODULES; do
        result='?'
        level='err'
        printf "$module" >&2
        log info "$phase $ACTION $module"
        if type "mod__$module" | grep -q -w "function"; then
            if "mod__$module"; then
                result='+'
                level='info'
            else
                result='!'
                rc=1
            fi
        fi
        printf '(%s) ' $result >&2
        log "$level" "$phase $ACTION $module ($result)"
    done
    return $rc
}

### init-main functions

init__set_hostname() {
    local fqdn=$(imds @hostname)
    local host="${fqdn%%\.*}"

    mkdir -p "$ROOT"/etc
    echo "$host" > "$ROOT"/etc/hostname
    $MOCK hostname -F "$ROOT"/etc/hostname
    echo -e "127.0.1.1\t$fqdn $host" >> "$ROOT"/etc/hosts
}

init__set_ssh_keys() {
    local user="$CLOUD_USER"
    local pwent="$(getent passwd "$user")"
    local group=$(echo "$pwent" | cut -d: -f4)
    local ssh_dir="${ROOT}$(echo "$pwent" | cut -d: -f6)/.ssh"
    local keys_file="$ssh_dir/authorized_keys"

    if [ ! -d "$ssh_dir" ]; then
        mkdir -p "$ssh_dir"
        chmod 700 "$ssh_dir"
    fi

    touch "$keys_file"
    chmod 600 "$keys_file"
    $MOCK chown -R "$user:$group" "$ssh_dir"
    imds @ssh-keys > "$keys_file"
}

init__save_userdata() {
    local userdata="$TINY_CLOUD_VAR/user-data"
    local tmpfile=$(mktemp "$userdata.XXXXXX")

    imds -e @userdata > "$tmpfile"
    if printf '\037\213\010' | cmp -s -n 3 "$tmpfile"; then
        gzip -dc "$tmpfile" > "$userdata"
    elif printf 'BZh' | cmp -s -n 3 "$tmpfile"; then
        bzip2 -dc "$tmpfile" > "$userdata"
    elif printf '\375\067\172\130\132\000' | cmp -s -n 6 "$tmpfile"; then
        unxz -c "$tmpfile" > "$userdata"
    elif printf '\135\000\000' | cmp -s -n 3 "$tmpfile"; then
        lzma -dc "$tmpfile" > "$userdata"
    elif printf '\211\114\132' | cmp -s -n 3 "$tmpfile"; then
        lzop -dc "$tmpfile" > "$userdata"
    elif printf '\004\042\115\030' | cmp -s -n 4 "$tmpfile"; then
        lz4 -dc "$tmpfile" > "$userdata"
    elif printf '(\265/\375' | cmp -s -n 4 "$tmpfile"; then
        zstd -dc "$tmpfile" > "$userdata"
    else
        cp "$tmpfile" "$userdata"
    fi
    rm "$tmpfile"
}

### init-final functions

init__run_userdata() {
    local log="$TINY_CLOUD_LOGS/user-data.log"
    local exit="$TINY_CLOUD_LOGS/user-data.exit"
    local userdata="$TINY_CLOUD_VAR/user-data"

    if [ $(userdata_type) != "script" ]; then
        printf '(Not Executable) ' >&2
        log info "$phase $ACTION - not exectutable"
        return
    fi

    chmod +x "$userdata"
    { "$userdata" 2>& 1; echo $? > "$exit"; } | tee "$log"

    return $(cat "$exit")
}

### potentially override the above, per cloud

# load cloud-specific init functions / vars
if [ -f "$LIBDIR/tiny-cloud/cloud/$CLOUD/init" ]; then
    . "$LIBDIR/tiny-cloud/cloud/$CLOUD/init"
fi


# this should be non-overrideable, but need this before we...
userdata_type() {
    if [ -f "$TINY_CLOUD_VAR/user-data" ]; then
        header=$(head -n1 "$TINY_CLOUD_VAR/user-data" | sed -e 's/[[:space:]].*//g')
        case "$header" in
            '#cloud-config') echo cloud-config;;
            '#!'*) echo script;;
            *) echo unknown;;
        esac
    else
        echo missing
    fi
}

# ...load user-data type-specific init functions / vars
# TODO
